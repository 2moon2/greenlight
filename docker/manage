#!/bin/bash
export MSYS_NO_PATHCONV=1
set -e

usage () {
  cat <<-EOF

  Usage: $0 {start|stop|build|rebuild|shell}

  Options:

  build - Build the docker images for the project.
          You need to do this first.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.

          To start the services and connect them to a specific TOB API instance,
          inject the url for the API using the tob-url flag.

          For example:
          $0 start tob-url=http://docker.for.win.localhost:56325/api/v1

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.
         
  rebuild - Rebuild the docker images.  
EOF
exit 1
}

configureEnvironment () {
  export THE_ORG_BOOK_BASE_URL="https://django-devex-von-dev.pathfinder.gov.bc.ca/api/v1"
}

ALL_CONTAINERS="\
    bc_registries\
    worksafe_bc\
    ministry_of_finance\
    fraser_valley_health_authority\
    city_of_surrey\
    liquor_control_and_licensing_branch\
"
DEFAULT_CONTAINERS="bc_registries"

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

cd "$SCRIPT_HOME"

case "$1" in
  start)
      configureEnvironment
      shift
      ARGS="--force-recreate"
      CONTAINERS=""
      for arg in $@; do
        case "$arg" in
          -*)
            ARGS+=" $arg";;
          all)
            CONTAINERS+=" $ALL_CONTAINERS";;
          tob-url*)
            # Inject the URL for the TOB API
            # Example; ./manage start tob-url=http://docker.for.win.localhost:56325/api/v1
            API_URL=$(echo ${arg} | sed 's~\(^.*=\)\(.*$\)~\2~;')
            export THE_ORG_BOOK_BASE_URL=${API_URL}
            ;;  
          *)
            CONTAINERS+=" $arg"
        esac
      done
      if [ -z "$CONTAINERS" ]; then
        CONTAINERS="$DEFAULT_CONTAINERS"
      fi
      docker-compose up $ARGS $CONTAINERS
    ;;
  stop)
      docker-compose stop
    ;;
  build)
      echo -e "\nBuilding libindy image ..."
      docker build \
          -t 'libindy' \
          -f 'libindy/Dockerfile' \
          .

      echo -e "\nBuilding python-libindy image ..."
      docker build \
          -t 'python-libindy' \
          -f 'python-libindy/Dockerfile' \
          .

      echo -e "\nBuilding permitify image ..."
      docker build \
          -t 'permitify' \
          -f 'permitify/Dockerfile' \
          ..
    ;;
  rebuild)
      echo -e "\nRebuilding libindy image ..."
      docker build \
          --no-cache \
          -t 'libindy' \
          -f 'libindy/Dockerfile' \
          .
      
      echo -e "\nRebuilding python-libindy image ..."
      docker build \
          --no-cache \
          -t 'python-libindy' \
          -f 'python-libindy/Dockerfile' \
          .

      echo -e "\nRebuilding permitify image ..."
      docker build \
          --no-cache \
          -t 'permitify' \
          -f 'permitify/Dockerfile' \
          ..
    ;;
  shell)
      docker-compose run web bash
    ;;
  *)
      usage;;
esac

( cd - ) > /dev/null