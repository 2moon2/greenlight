#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(docker run --net=host codenvy/che-ip)}
set -e

SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Usage: $0 {start|stop|build|rebuild|shell}

  Options:

  build - Build the docker images for the project.
          You need to do this first.

  start - Creates the application containers from the built images
          and starts the services based on the docker-compose.yml file.

          To start the services and connect them to a specific TOB API instance,
          inject the url for the API using the tob-url flag.

          Examples:
          $0 start seed=my_seed
          $0 start seed=my_seed THE_ORG_BOOK_API_URL=http://docker.for.win.localhost:56325/api/v1
          $0 start bc_registries seed=my_seed
          $0 start bc_registries seed=my_seed THE_ORG_BOOK_API_URL=http://docker.for.win.localhost:56325/api/v1

  stop - Stops the services.  This is a non-destructive process.  The containers
         are not deleted so they will be reused the next time you run start.

  rebuild - Rebuild the docker images.
EOF
exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
ALL_CONTAINERS="\
    bc_registries\
    worksafe_bc\
    ministry_of_finance\
    fraser_valley_health_authority\
    city_of_surrey\
    liquor_control_and_licensing_branch\
    redis \
    onbis\
"
DEFAULT_CONTAINERS="bc_registries"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
configureEnvironment () {
  for arg in $@; do
    case "$arg" in
      *=*)
        export ${arg}
        ;;
    esac
  done

  export APPLICATION_URL=${APPLICATION_URL-http://localhost}
  # export THE_ORG_BOOK_API_URL=${THE_ORG_BOOK_API_URL-https://django-devex-von-dev.pathfinder.gov.bc.ca/api/v1}
  # export THE_ORG_BOOK_APP_URL=${THE_ORG_BOOK_APP_URL-https://devex-von-dev.pathfinder.gov.bc.ca}
  export THE_ORG_BOOK_API_URL="http://tob-api:8080/api/v1"
  export THE_ORG_BOOK_APP_URL="http://${DOCKERHOST}:8080"
  
  # Hacky - we trim the length of the string by 1 then
  # append unique numbers to each service in docker-compose.yml.
  # Each service needs a unique wallet seed, but we only
  # want the developer to have to set it once.
  if [ -z "$seed" ]; then
    echo "You must provide a seed parameter. For example: seed=my_seed_000000000000000000000000."
    exit 1
  fi

  if [ ${#seed} -ne 32 ]; then
    echo "The seed parameter must be 32 characters long exactly."
    exit 1
  fi

  if [ -z "$TOB_INDY_SEED" ]; then
    echo "You must provide a TOB_INDY_SEED parameter. For example: seed=my_tob_seed_00000000000000000000."
    exit 1
  fi

  if [ ${#TOB_INDY_SEED} -ne 32 ]; then
    echo "The TOB_INDY_SEED parameter must be 32 characters long exactly."
    exit 1
  fi

  export LEDGER_URL=${LEDGER_URL-http://$DOCKERHOST:9000}
  export INDY_WALLET_SEED=${seed%?}
  export TOB_INDY_SEED=${TOB_INDY_SEED}

  export INDY_WALLET_URL=${INDY_WALLET_URL-http://$DOCKERHOST:6000/api/v1/}
  export INDY_WALLET_TYPE=${wallet}

  if [ "$COMMAND" == "start" ]; then
    if [ -z "$wallet" ]; then
      export INDY_WALLET_TYPE="virtual"
    fi
  fi
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
      *=*)
        # Skip it
        ;;
      all)
        CONTAINERS+=" $ALL_CONTAINERS";;
     -*)
        ARGS+=" $arg";;
      *)
        CONTAINERS+=" $arg";;
    esac
  done

  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

build() {
    echo -e "\nBuilding libindy image ..."
    docker build \
        -t 'libindy' \
        -f 'libindy/Dockerfile' \
        .

    echo -e "\nBuilding python-libindy image ..."
    docker build \
        -t 'python-libindy' \
        -f 'python-libindy/Dockerfile' \
        .

    echo -e "\nBuilding permitify image ..."
    docker build \
        -t 'permitify' \
        -f 'permitify/Dockerfile' \
        ..
}

rebuild() {
    echo -e "\nRebuilding libindy image ..."
    docker build \
        --no-cache \
        -t 'libindy' \
        -f 'libindy/Dockerfile' \
        .

    echo -e "\nRebuilding python-libindy image ..."
    docker build \
        --no-cache \
        -t 'python-libindy' \
        -f 'python-libindy/Dockerfile' \
        .

    echo -e "\nRebuilding permitify image ..."
    docker build \
        --no-cache \
        -t 'permitify' \
        -f 'permitify/Dockerfile' \
        ..
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null

case "$1" in
  start)
      shift
      _startupParams=$(getStartupParams $@)
      configureEnvironment $@
      docker-compose up ${_startupParams}
    ;;
  stop)
      docker-compose stop
    ;;
  build)
      build
    ;;
  rebuild)
      rebuild
    ;;
  shell)
      docker-compose run web bash
    ;;
  rm)
      docker-compose rm -f
      docker volume rm -f docker_bc_registries_wallet docker_city_of_surrey_wallet docker_fraser_valley_health_authority_wallet docker_liquor_control_and_licensing_branch_wallet docker_ministry_of_finance_wallet docker_worksafe_bc_wallet docker_acme_corp_apply_wallet docker_acme_corp_wallet docker_faber_college_wallet docker_thrift_bank_wallet
    ;;
  *)
      usage;;
esac

popd >/dev/null