#!/bin/bash
export MSYS_NO_PATHCONV=1
SCRIPT_HOME="$( cd "$( dirname "$0" )" && pwd )"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage () {
  cat <<-EOF

  Manage the permitify issuer services within a given OpenShift environment.

  Usage:
    $0 [options] [commands]

  Example:
    $0 -e test scaleDown
    - This will scale down all of the issuer services in the permitify TEST environment.

  Options:
  ========
    -h prints the usage for the script
    -e <Environment> the environment (dev/test/prod) into which you are deploying (default: ${DEPLOYMENT_ENV_NAME})
    -l apply local settings and parameters
    -p <profile> load a specific settings profile; setting.<profile>.sh
    -P Use the default settings profile; settings.sh.  Use this flag to ignore all but the default
       settings profile when there is more than one settings profile defined for a project.
    -x run the script in debug mode to see what's happening

  Commands:
  ========
    scaleUp
      - Scale down one or more issuer service.  By default all issuer services are affected.
        To scale select issuer services list them following the command.
        For example;
          $0 -e test scaleUp bc-registries worksafe-bc

    scaleDown
      - Scale up one or more issuer services.  By default all issuer services are affected.
        To scale select issuer services list them following the command.
        For example;
          $0 -e test scaleDown bc-registries worksafe-bc

    recycle
      - Recycle up one or more issuer services.  By default all issuer services are affected.
        To recycle select issuer services list them following the command.
        For example;
          $0 -e test recycle bc-registries worksafe-bc

    reset
      - Reset one or more issuer services.  By default all issuer services are affected.
        To reset select issuer services list them following the command.
        For example;
          $0 -e test reset bc-registries worksafe-bc

        Performs the following operations:
        - Delete the persistent indy wallet information.
        - Scale down the pod.
        - Register the environment's DID with the ledger.

    registerDids
      - Register/re-register the issuer services's DIDs with the ledger.

    createDeployConfig
      - Create one or more deployment configurations in an OpenShift environment
        using pre-generated deployment configuration files.

        Examples;
          $0 -e dev createDeployConfig
          - This will create deployment configurations from all of the existing deployment configuration files.

          $0 -e dev createDeployConfig ./bc-registries-deploy_DeploymentConfig.json
          - This will create a deployment configurations from the specified deployment configuration file.

    replaceDeployConfig
      - Replace one or more deployment configurations in an OpenShift environment
        using pre-generated deployment configuration files.

        Examples;
          $0 -e dev replaceDeployConfig
          - This will replace deployment configurations for all of the existing deployment configuration files.

          $0 -e dev replaceDeployConfig ./bc-registries-deploy_DeploymentConfig.json
          - This will replace the deployment configurations for the specified deployment configuration file.

    getIssuerServicePods
      - Get a list of issuer service pods running in a given environment.
EOF
exit 1
}

# -----------------------------------------------------------------------------------------------------------------
# Initialization:
# -----------------------------------------------------------------------------------------------------------------
while getopts p:Pe:lxh FLAG; do
  case $FLAG in
    p ) export PROFILE=$OPTARG ;;
    P ) export IGNORE_PROFILES=1 ;;
    e ) export DEPLOYMENT_ENV_NAME=$OPTARG ;;
    l ) export APPLY_LOCAL_SETTINGS=1 ;;
    x ) export DEBUG=1 ;;
    h ) usage ;;
    \? ) #unrecognized option - show help
      echo -e \\n"Invalid script option: -${OPTARG}"\\n
      usage
      ;;
  esac
done
shift $((OPTIND-1))

if [ ! -z "${DEBUG}" ]; then
  set -x
fi

# Check for required options ...
if [ -z "${DEPLOYMENT_ENV_NAME}" ]; then
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}You MUST specify an environment name using the '-e' flag.${_nc}"
  echo -e "${_red}Assuming a default would have unwanted consequences.${_nc}"
  usage
fi

# Load the project settings and functions ...
_includeFile="ocFunctions.inc"
_settingsFile="settings.sh"
if [ ! -z $(type -p ${_includeFile}) ]; then
  _includeFilePath=$(type -p ${_includeFile})
  export OCTOOLSBIN=$(dirname ${_includeFilePath})

  if [ -f ${OCTOOLSBIN}/${_settingsFile} ]; then
    . ${OCTOOLSBIN}/${_settingsFile}
  fi

  if [ -f ${OCTOOLSBIN}/${_includeFile} ]; then
    . ${OCTOOLSBIN}/${_includeFile}
  fi
else
  _red='\033[0;31m'
  _yellow='\033[1;33m'
  _nc='\033[0m' # No Color
  echo -e \\n"${_red}${_includeFile} could not be found on the path.${_nc}"
  echo -e "${_yellow}Please ensure the openshift-developer-tools are installed on and registered on your path.${_nc}"
  echo -e "${_yellow}https://github.com/BCDevOps/openshift-developer-tools${_nc}"
fi

# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
reset() {
  _pods=${@}
  if [ -z "${_pods}" ]; then
    echo -e \\n"reset; Missing parameter!"\\n
    exit 1
  fi

  for _pod in ${_pods}; do
    deleteWallets ${_pod}
    exitOnError
    scaleDown ${_pod}
  done

  printAndWait "If you are resetting the ledger, wait for the ledger to completely start up before continuing."

  registerDids $(getDidNames)
}

deleteWallets() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echo -e \\n"deleteWallets; Missing parameter!"\\n
    exit 1
  fi

  deleteFromPods "/home/indy/.indy_client/wallet/*" ${_podName}
  if hasEnterpriseWallet ${_podName}; then
    deleteEnterpriseWallet ${_podName}
  fi
}

deleteEnterpriseWallet() {
  _podName=${1}
  _walletDbPodName=${WALLET_DB_POD_NAME:-wallet-db}
  if [ -z "${_podName}" ]; then
    echo -e \\n"deleteEnterpriseWallet; Missing parameter!"\\n
    exit 1
  fi

  if [ -z "${WALLET_DB_INSTANCE_NAME}" ]; then
    export WALLET_DB_INSTANCE_NAME=$(getPodByName.sh ${_walletDbPodName})
  fi

  if [ ! -z "${WALLET_DB_INSTANCE_NAME}" ]; then
    _walletName=$(getWalletName ${_podName})
    _sql="delete from api_walletitem where wallet_name LIKE '${_walletName}%';"
    _pSqlCmd="psql -U\${POSTGRESQL_USER} -d \${POSTGRESQL_DATABASE} -ac \"${_sql}\""

    runInContainer \
      ${_walletDbPodName} \
      "${_pSqlCmd}"
  else
    echo -e "No enterprise wallet instance was found in this environment ..."
  fi
}

hasEnterpriseWallet() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echo -e \\n"hasEnterpriseWallet; Missing parameter!"\\n
    exit 1
  fi

  _walletType=$(getWalletType ${_podName})
  if [ "${_walletType}" == "remote" ]; then
    return 0
  else
    return 1
  fi
}

getWalletType() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echo -e \\n"getWalletType; Missing parameter!"\\n
    exit 1
  fi

  runInContainer \
    "${_podName}" \
    "env | grep INDY_WALLET_TYPE | sed 's~INDY_WALLET_TYPE=\(.*\)$~\1~'"
}

getWalletName() {
  _podName=${1}
  if [ -z "${_podName}" ]; then
    echo -e \\n"getWalletName; Missing parameter!"\\n
    exit 1
  fi

  runInContainer \
    "${_podName}" \
    "cat config.toml | grep ^name | sed 's~^name\s*=\s*\"\(.*\)\"\s*$~\1~' | head -n 1"
}

recycle() {
  _pods=${@}
  if [ -z "${_pods}" ]; then
    echo -e \\n"recycle; Missing parameter!"\\n
    exit 1
  fi

  scaleDown ${_pods}
  printAndWait "Wait for all of the pods to scale down completely before continuing."
  scaleUp ${_pods}
}

getDidNames() {
  _didNames="
    bc_registries
    city_of_surrey
    fraser_valley
    liquor_control
    ministry_of_finance
    worksafe_bc
    onbis"

  echo ${_didNames}
}

getLedgerAddress() {
  case "${DEPLOYMENT_ENV_NAME}" in
    dev)
      _ledgerAddress="159.89.115.24";;
    test)
      _ledgerAddress="159.89.125.134";;
    prod)
      _ledgerAddress="159.89.125.134";;
    *)
      return 1;;
  esac

  echo ${_ledgerAddress}
}

# Add any non-issurer service pods to this list
NON_ISSURER_SERVICE_PODS="redis wallet wallet-db"

getIssuerServicePods() {
  _pods=$(getAllPods ${@})
  _issuerServicePods=$(removeFromList "${_pods}" "${NON_ISSURER_SERVICE_PODS}")
  echo "${_issuerServicePods}"
}
# =================================================================================================================

pushd ${SCRIPT_HOME} >/dev/null
_cmd=$(toLower ${1})
shift

case "${_cmd}" in
  scaleup)
    switchProject
    PODS=$(getIssuerServicePods ${@})
    scaleUp ${PODS}
    ;;
  scaledown)
    switchProject
    PODS=$(getIssuerServicePods ${@})
    scaleDown ${PODS}
    ;;
  recycle)
    switchProject
    PODS=$(getIssuerServicePods ${@})
    recycle ${PODS}
    ;;
  reset)
    switchProject
    PODS=$(getIssuerServicePods ${@})
    reset ${PODS}
    ;;
  registerdids)
    registerDids $(getDidNames)
    ;;
  createdeployconfig)
    deployConfigs ${@}
    ;;
  replacedeployconfig)
    export OC_ACTION=replace
    deployConfigs ${@}
    ;;
  getpods)
    getIssuerServicePods ${@}
    ;;
  *)
    echoWarning "Unrecognized command; ${_cmd}"
    usage
    ;;
esac

popd >/dev/null
